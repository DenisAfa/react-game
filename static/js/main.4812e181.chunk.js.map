{"version":3,"sources":["utils/cells/generateCells.ts","utils/cells/addBombs.ts","utils/cells/getAdjacentCells.tsx","utils/cells/getNumberForCells.tsx","utils/cells/openMultipleCells.ts","components/Info/FaceInfo/FaceInfo.tsx","components/Settings/Settings.tsx","components/Field/Cell/Cell.tsx","components/Field/Field.tsx","assets/icons/rs_school_js.svg","components/Footer/Footer.tsx","components/Info/NumberDisplay/NumberDisplay.tsx","components/Info/Info.tsx","components/App.tsx","index.tsx"],"names":["CellValue","CellState","addBombs","cells","maxRows","maxColumns","numberOfBombs","bombsPlaced","randomRow","Math","floor","random","randomColumn","value","bomb","map","row","rowIndex","cell","columnIndex","getAdjacentCells","adjacentCells","push","calculateNumberOfBombsForCell","bombsCells","forEach","bombCell","getNumberForCells","sideAdjacentCells","generateCells","numbersOfBombs","id","i","j","none","state","open","Face","openMultipleCells","column","currentCell","visible","flagged","newCells","slice","adjacentCell","sideAdjacentCell","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomRightCell","Levels","FaceInfo","face","setHasLostCallback","setTimeCallback","setCellsCallback","setIsLiveCallback","setBombCounterCallback","setHasWonCallback","setFaceCallback","className","onClick","smile","Cell","isRed","data-row","data-col","renderContent","React","memo","Field","isLive","bombCounter","hasLost","handleCellClick","safeOpenCellsExists","cellElements","useMemo","onMouseDown","e","isNaN","Number","target","dataset","col","oops","onMouseUp","onContextMenu","preventDefault","currentCells","handleCellContext","Footer","href","rel","src","logo","alt","NumberDisplay","number","abs","toString","padStart","Info","time","useEffect","timer","setInterval","clearInterval","Settings","setMaxRowsCallback","setMaxColumnsCallback","setNumbersOfBombsCallback","setHasChangeLevelCallback","name","defaultValue","onChange","standard","expert","crazy","disabled","App","useState","setMaxRows","setMaxColumns","setNumbersOfBombs","setFace","setIsLive","setTime","setCells","setBombCounter","setHasLost","hasWon","setHasWon","hasChangeLevel","setHasChangeLevel","useCallback","faceType","timeValue","increaseValue","isLiveValue","newBombCounter","isAddition","lost","won","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4812e181.chunk.js","sourcesContent":["import addBombs from \"./addBombs\";\nimport getNumberForCells from \"./getNumberForCells\";\n\nexport enum CellValue {\n  none,\n  one,\n  two,\n  three,\n  four,\n  five,\n  six,\n  seven,\n  eight,\n  bomb,\n}\n\nexport enum CellState {\n  open,\n  visible,\n  flagged,\n}\n\nexport type CellType = {\n  id: number;\n  value: CellValue;\n  state: CellState;\n  isRed?: boolean;\n};\n\nconst generateCells = (\n  maxRows: number,\n  maxColumns: number,\n  numbersOfBombs: number\n): CellType[][] => {\n  let cells: CellType[][] = [];\n  let id = 1;\n  for (let i = 0; i < maxRows; i += 1) {\n    cells.push([]);\n    for (let j = 0; j < maxColumns; j += 1) {\n      cells[i].push({\n        id: id,\n        value: CellValue.none,\n        state: CellState.open,\n      });\n      id += 1;\n    }\n  }\n  cells = addBombs(cells, maxRows, maxColumns, numbersOfBombs);\n  cells = getNumberForCells(cells, maxRows, maxColumns);\n\n  return cells;\n};\n\nexport default generateCells;\n","import { CellType, CellValue } from \"./generateCells\";\n\nconst addBombs = (\n  cells: CellType[][],\n  maxRows: number,\n  maxColumns: number,\n  numberOfBombs: number\n): CellType[][] => {\n  let bombsPlaced: number = 0;\n  while (bombsPlaced < numberOfBombs) {\n    const randomRow: number = Math.floor(Math.random() * maxRows);\n    const randomColumn: number = Math.floor(Math.random() * maxColumns);\n    const currentCell: CellType = cells[randomRow][randomColumn];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) =>\n        row.map((cell, columnIndex) => {\n          if (randomRow === rowIndex && randomColumn === columnIndex) {\n            return {\n              ...cell,\n              value: CellValue.bomb,\n            };\n          }\n          return cell;\n        })\n      );\n      bombsPlaced += 1;\n    }\n  }\n  return cells;\n};\n\nexport default addBombs;\n","import { CellType } from \"./generateCells\";\n\nconst getAdjacentCells = (\n  cells: CellType[][],\n  rowIndex: number,\n  columnIndex: number,\n  maxColumns: number,\n  maxRows: number\n): (CellType | null)[] => {\n  const adjacentCells: (CellType | null)[] = [];\n\n  rowIndex > 0 && columnIndex > 0\n    ? adjacentCells.push(cells[rowIndex - 1][columnIndex - 1])\n    : adjacentCells.push(null);\n  rowIndex > 0\n    ? adjacentCells.push(cells[rowIndex - 1][columnIndex])\n    : adjacentCells.push(null);\n\n  rowIndex > 0 && columnIndex < maxColumns - 1\n    ? adjacentCells.push(cells[rowIndex - 1][columnIndex + 1])\n    : adjacentCells.push(null);\n  columnIndex > 0\n    ? adjacentCells.push(cells[rowIndex][columnIndex - 1])\n    : adjacentCells.push(null);\n\n  columnIndex < maxColumns - 1\n    ? adjacentCells.push(cells[rowIndex][columnIndex + 1])\n    : adjacentCells.push(null);\n\n  rowIndex < maxRows - 1 && columnIndex > 0\n    ? adjacentCells.push(cells[rowIndex + 1][columnIndex - 1])\n    : adjacentCells.push(null);\n\n  rowIndex < maxRows - 1\n    ? adjacentCells.push(cells[rowIndex + 1][columnIndex])\n    : adjacentCells.push(null);\n\n  rowIndex < maxRows - 1 && columnIndex < maxColumns - 1\n    ? adjacentCells.push(cells[rowIndex + 1][columnIndex + 1])\n    : adjacentCells.push(null);\n\n  return adjacentCells;\n};\n\nexport default getAdjacentCells;\n","import { CellType, CellValue } from \"./generateCells\";\nimport getAdjacentCells from \"./getAdjacentCells\";\n\nconst getNumberForCells = (\n  cells: CellType[][],\n  maxRows: number,\n  maxColumns: number\n): CellType[][] => {\n  cells.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      let currentCell = cell;\n      if (currentCell.value === CellValue.bomb) {\n        return;\n      }\n\n      let numberOfBombs = calculateNumberOfBombsForCell(\n        cells,\n        rowIndex,\n        columnIndex,\n        maxColumns,\n        maxRows\n      );\n\n      if (numberOfBombs > 0) {\n        cells[rowIndex][columnIndex] = {\n          ...cell,\n          value: numberOfBombs,\n        };\n      }\n    });\n  });\n  return cells;\n};\n\nconst calculateNumberOfBombsForCell = (\n  cells: CellType[][],\n  rowIndex: number,\n  columnIndex: number,\n  maxColumns: number,\n  maxRows: number\n): number => {\n  const bombsCells: (CellType | null)[] = getAdjacentCells(\n    cells,\n    rowIndex,\n    columnIndex,\n    maxColumns,\n    maxRows\n  );\n\n  let numberOfBombs = 0;\n\n  bombsCells.forEach((bombCell) => {\n    if (bombCell?.value === CellValue.bomb) {\n      numberOfBombs += 1;\n    }\n  });\n\n  return numberOfBombs;\n};\n\nexport default getNumberForCells;\n","import { CellState, CellType, CellValue } from \"./generateCells\";\nimport getAdjacentCells from \"./getAdjacentCells\";\n\nenum sideAdjacentCells {\n  topLeftCell,\n  topCell,\n  topRightCell,\n  leftCell,\n  rightCell,\n  bottomLeftCell,\n  bottomCell,\n  bottomRightCell,\n}\n\nconst openMultipleCells = (\n  cells: CellType[][],\n  row: number,\n  column: number,\n  maxRows: number,\n  maxColumns: number\n): CellType[][] => {\n  const currentCell = cells[row][column];\n\n  if (\n    currentCell.state === CellState.visible ||\n    currentCell.state === CellState.flagged\n  ) {\n    return cells;\n  }\n\n  let newCells = cells.slice();\n  newCells[row][column].state = CellState.visible;\n\n  const currentAdjacentCells = getAdjacentCells(\n    cells,\n    row,\n    column,\n    maxColumns,\n    maxRows\n  );\n  currentAdjacentCells.forEach((adjacentCell, sideAdjacentCell) => {\n    if (\n      adjacentCell?.state === CellState.open &&\n      adjacentCell.value !== CellValue.bomb\n    ) {\n      switch (sideAdjacentCell) {\n        case sideAdjacentCells.topLeftCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row - 1,\n              column - 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row - 1][column - 1].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.topCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row - 1,\n              column,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row - 1][column].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.topRightCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row - 1,\n              column + 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row - 1][column + 1].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.leftCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row,\n              column - 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row][column - 1].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.rightCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row,\n              column + 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row][column + 1].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.bottomLeftCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row + 1,\n              column - 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row + 1][column - 1].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.bottomCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row + 1,\n              column,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row + 1][column].state = CellState.visible;\n          }\n          break;\n        case sideAdjacentCells.bottomRightCell:\n          if (adjacentCell.value === CellValue.none) {\n            newCells = openMultipleCells(\n              newCells,\n              row + 1,\n              column + 1,\n              maxRows,\n              maxColumns\n            );\n          } else {\n            newCells[row + 1][column + 1].state = CellState.visible;\n          }\n          break;\n      }\n    }\n    return newCells;\n  });\n\n  return newCells;\n};\n\nexport default openMultipleCells;\n","import React from \"react\";\nimport generateCells, { CellType } from \"../../../utils/cells/generateCells\";\nimport \"./FaceInfo.scss\";\n\nexport enum Face {\n  smile = \"🤠\",\n  oops = \"🥶\",\n  lost = \"☠️\",\n  won = \"😎\",\n}\n\ninterface FaceInfoProps {\n  face: Face;\n  setTimeCallback(timeValue: number, increaseValue?: number): void;\n  setCellsCallback(newCells: CellType[][]): void;\n  setIsLiveCallback(isLiveValue: boolean): void;\n  setBombCounterCallback(\n    newBombCounter: number,\n    increaseValue?: number,\n    isAddition?: boolean\n  ): void;\n  setHasLostCallback(hasLost: boolean): void;\n  setHasWonCallback(hasLost: boolean): void;\n  setFaceCallback(face: Face): void;\n  maxRows: number;\n  maxColumns: number;\n  numbersOfBombs: number;\n}\n\nconst FaceInfo: React.FC<FaceInfoProps> = ({\n  face,\n  setHasLostCallback,\n  setTimeCallback,\n  setCellsCallback,\n  setIsLiveCallback,\n  setBombCounterCallback,\n  setHasWonCallback,\n  setFaceCallback,\n  maxRows,\n  maxColumns,\n  numbersOfBombs,\n}) => {\n  const handleFaceClick = (): void => {\n    setIsLiveCallback(false);\n    setTimeCallback(0);\n    setCellsCallback(generateCells(maxRows, maxColumns, numbersOfBombs));\n    setBombCounterCallback(numbersOfBombs);\n    setHasLostCallback(false);\n    setHasWonCallback(false);\n    setFaceCallback(Face.smile);\n  };\n  return (\n    <div className=\"game-info__smile\" onClick={handleFaceClick}>\n      <span className=\"game-info__image\">{face}</span>\n    </div>\n  );\n};\n\nexport default FaceInfo;\n","import React, { BaseSyntheticEvent } from \"react\";\nimport \"./Settings.scss\";\n\ninterface SettingsProps {\n  setMaxRowsCallback(maxRows: number): void;\n  setMaxColumnsCallback(maxColumns: number): void;\n  setNumbersOfBombsCallback(numbersOfBombs: number): void;\n  setHasChangeLevelCallback(hasChangeLevel: boolean): void;\n}\n\nenum Levels {\n  standard,\n  expert,\n  crazy,\n}\n\nconst Settings: React.FC<SettingsProps> = ({\n  setMaxRowsCallback,\n  setMaxColumnsCallback,\n  setNumbersOfBombsCallback,\n  setHasChangeLevelCallback,\n}) => {\n  const setLevel = (e: BaseSyntheticEvent): void => {\n    const level = Number(e.target.value);\n\n    switch (level) {\n      case Levels.standard:\n        setMaxRowsCallback(9);\n        setMaxColumnsCallback(9);\n        setNumbersOfBombsCallback(10);\n        break;\n      case Levels.expert:\n        setMaxRowsCallback(16);\n        setMaxColumnsCallback(16);\n        setNumbersOfBombsCallback(40);\n        break;\n      case Levels.crazy:\n        setMaxRowsCallback(16);\n        setMaxColumnsCallback(30);\n        setNumbersOfBombsCallback(99);\n        break;\n      default:\n        return;\n    }\n    setHasChangeLevelCallback(true);\n  };\n\n  return (\n    <header className=\"game-header\">\n      <section className=\"settings\">\n        <div className=\"settings__levels levels\">\n          <select\n            className=\"levels__list\"\n            name=\"levels\"\n            defaultValue={\"DEFAULT\"}\n            onChange={setLevel}\n          >\n            <option value=\"DEFAULT\" disabled>\n              Levels\n            </option>\n            <option value=\"0\">Standard</option>\n            <option value=\"1\">Expert</option>\n            <option value=\"2\">Crazy</option>\n          </select>\n        </div>\n      </section>\n    </header>\n  );\n};\n\nexport default React.memo(Settings);\n","import React from \"react\";\nimport \"./Cell.scss\";\nimport { CellState, CellValue } from \"../../../utils/cells/generateCells\";\n\ninterface CellProps {\n  state: CellState;\n  value: CellValue;\n  column: number;\n  row: number;\n  isRed?: boolean;\n}\nconst Cell: React.FC<CellProps> = ({ value, state, row, column, isRed }) => {\n  const renderContent = (): React.ReactNode => {\n    switch (state) {\n      case CellState.visible:\n        if (value === CellValue.bomb) {\n          return <span>🧨</span>;\n        } else if (value === CellValue.none) {\n          return null;\n        }\n        return value;\n      case CellState.flagged:\n        return (\n          <span data-row={`${row}`} data-col={`${column}`}>\n            🏴‍☠️\n          </span>\n        );\n      default:\n        return null;\n    }\n  };\n  return (\n    <div\n      data-row={`${row}`}\n      data-col={`${column}`}\n      className={`game-field__cell cell ${\n        state === CellState.visible ? \"game-field__cell_visible\" : \"\"\n      } game-field__cell_value-${value} ${isRed ? \"game-field__cell_red\" : \"\"}`}\n    >\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default React.memo(Cell);\n","import React, { BaseSyntheticEvent, useMemo } from \"react\";\nimport {\n  CellState,\n  CellType,\n  CellValue,\n} from \"../../utils/cells/generateCells\";\nimport openMultipleCells from \"../../utils/cells/openMultipleCells\";\nimport { Face } from \"../Info/FaceInfo/FaceInfo\";\nimport Cell from \"./Cell/Cell\";\nimport \"./Field.scss\";\n\ninterface FieldProps {\n  cells: CellType[][];\n  isLive: boolean;\n  bombCounter: number;\n  hasLost: boolean;\n  setFaceCallback(faceType: Face): void;\n  setCellsCallback(newCells: CellType[][]): void;\n  setIsLiveCallback(isLiveValue: boolean): void;\n  setBombCounterCallback(\n    newBombCounter: number,\n    increaseValue?: number,\n    isAddition?: boolean\n  ): void;\n  setHasLostCallback(hasLost: boolean): void;\n  setHasWonCallback(hasWon: boolean): void;\n  maxRows: number;\n  maxColumns: number;\n}\n\nconst Field: React.FC<FieldProps> = ({\n  cells,\n  isLive,\n  bombCounter,\n  maxRows,\n  maxColumns,\n  setFaceCallback,\n  setCellsCallback,\n  setIsLiveCallback,\n  setBombCounterCallback,\n  setHasLostCallback,\n  setHasWonCallback,\n  hasLost,\n}) => {\n  const handleMouseDown = (e: BaseSyntheticEvent): void => {\n    const isClickOnCell = isNaN(Number(e.target.dataset.row));\n    if (isClickOnCell) {\n      return;\n    }\n    const row = Number(e.target.dataset.row);\n    const column = Number(e.target.dataset.col);\n    const currentCell = cells[row][column];\n    if (\n      currentCell.state === CellState.visible ||\n      currentCell.state === CellState.flagged\n    ) {\n      return;\n    }\n    setFaceCallback(Face.oops);\n  };\n\n  const handleMouseUp = (): void => {\n    setFaceCallback(Face.smile);\n  };\n\n  const showAllBombs = (): CellType[][] => {\n    const currentCells = cells.slice();\n    return currentCells.map((row) =>\n      row.map((cell) => {\n        if (cell.value === CellValue.bomb) {\n          return {\n            ...cell,\n            state: CellState.visible,\n          };\n        }\n        return cell;\n      })\n    );\n  };\n\n  const handleCellClick = (row: number, column: number): void => {\n    if (!isLive && !hasLost) {\n      setIsLiveCallback(true);\n    }\n    let newCells = cells.slice();\n    const currentCell = cells[row][column];\n    if (\n      currentCell.state === CellState.flagged ||\n      currentCell.state === CellState.visible\n    ) {\n      return;\n    }\n\n    if (hasLost) {\n      return;\n    }\n\n    switch (currentCell.value) {\n      case CellValue.bomb:\n        setHasLostCallback(true);\n        newCells[row][column].isRed = true;\n        newCells = showAllBombs();\n        setCellsCallback(newCells);\n        return;\n      case CellValue.none:\n        newCells = openMultipleCells(\n          newCells,\n          row,\n          column,\n          maxRows,\n          maxColumns\n        );\n        break;\n      default:\n        newCells[row][column].state = CellState.visible;\n    }\n\n    let safeOpenCellsExists: boolean = false;\n    for (let i = 0; i < maxRows; i += 1) {\n      for (let j = 0; j < maxColumns; j += 1) {\n        const currentCell = newCells[i][j];\n\n        if (\n          currentCell.value !== CellValue.bomb &&\n          currentCell.state === CellState.open\n        ) {\n          safeOpenCellsExists = true;\n          break;\n        }\n      }\n    }\n\n    if (!safeOpenCellsExists) {\n      newCells = newCells.map((row) =>\n        row.map((cell) => {\n          if (cell.value === CellValue.bomb) {\n            return {\n              ...cell,\n              state: CellState.flagged,\n            };\n          }\n          return cell;\n        })\n      );\n      setHasWonCallback(true);\n    }\n\n    setCellsCallback(newCells);\n  };\n\n  const handleCellContext = (row: number, column: number): void => {\n    if (!isLive && !hasLost) {\n      setIsLiveCallback(true);\n    }\n\n    if (hasLost) {\n      return;\n    }\n\n    let currentCell = cells[row][column];\n    let currentCells = cells.slice();\n    if (currentCell.state === CellState.visible) {\n      return;\n    } else if (currentCell.state === CellState.open) {\n      currentCells[row][column].state = CellState.flagged;\n      setCellsCallback(currentCells);\n      if (bombCounter > -99) {\n        setBombCounterCallback(bombCounter, 1);\n      }\n    } else if (currentCell.state === CellState.flagged) {\n      currentCells[row][column].state = CellState.open;\n      setCellsCallback(currentCells);\n      setBombCounterCallback(bombCounter, 1, true);\n    }\n  };\n\n  const onClickFn = (e: BaseSyntheticEvent): void => {\n    const row = Number(e.target.dataset.row);\n    const column = Number(e.target.dataset.col);\n    if (isNaN(row) || isNaN(column)) {\n      return;\n    }\n    handleCellClick(row, column);\n  };\n\n  const onContextMenuFn = (e: BaseSyntheticEvent): void => {\n    const row = Number(e.target.dataset.row);\n    const column = Number(e.target.dataset.col);\n    e.preventDefault();\n    if (isNaN(row) || isNaN(column)) {\n      return;\n    }\n    handleCellContext(row, column);\n  };\n\n  const cellElements = useMemo(\n    (): JSX.Element[][] =>\n      cells.map((row, rowIndex) =>\n        row.map((cell, columnIndex) => (\n          <Cell\n            key={cell.id}\n            value={cell.value}\n            state={cell.state}\n            row={rowIndex}\n            column={columnIndex}\n            isRed={cell.isRed}\n          />\n        ))\n      ),\n    [cells]\n  );\n\n  return (\n    <div\n      className={`game-field ${maxColumns === 16 ? `game-field_16x16` : \"\"} ${\n        maxColumns === 30 ? `game-field_16x30` : \"\"\n      }`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onClick={onClickFn}\n      onContextMenu={onContextMenuFn}\n    >\n      {cellElements}\n    </div>\n  );\n};\n\nexport default React.memo(Field);\n","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","import React from \"react\";\nimport \"./Footer.scss\";\nimport logo from \"../../assets/icons/rs_school_js.svg\";\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"game-footer\">\n      <div className=\"info\">\n        <a\n          className=\"info__creator\"\n          href=\"https://github.com/DenisAfa\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Denis Afanasev\n        </a>\n        <a href=\"https://rs.school/\" target=\"_blank\" rel=\"noreferrer\">\n          <img src={logo} alt=\"logo\" className=\"info__logo\" />\n        </a>\n        <span className=\"info__year\">2021</span>\n      </div>\n    </footer>\n  );\n};\n\nexport default React.memo(Footer);\n","import React from \"react\";\nimport \"./NumberDisplay.scss\";\n\ninterface NumberDisplayProps {\n  value: number;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\n  let number: string =\n    value < 0\n      ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\n      : value.toString().padStart(3, \"0\");\n  return <div className=\"game-info__display\">{number}</div>;\n};\n\nexport default React.memo(NumberDisplay);\n","import React, { useEffect } from \"react\";\nimport { CellType } from \"../../utils/cells/generateCells\";\nimport FaceInfo, { Face } from \"./FaceInfo/FaceInfo\";\nimport \"./Info.scss\";\nimport NumberDisplay from \"./NumberDisplay/NumberDisplay\";\n\ninterface InfoProps {\n  face: Face;\n  time: number;\n  isLive: boolean;\n  bombCounter: number;\n  setTimeCallback(timeValue: number, increaseValue: number): void;\n  setCellsCallback(newCells: CellType[][]): void;\n  setIsLiveCallback(isLiveValue: boolean): void;\n  setBombCounterCallback(\n    newBombCounter: number,\n    increaseValue?: number,\n    isAddition?: boolean\n  ): void;\n  setHasLostCallback(hasLost: boolean): void;\n  setHasWonCallback(hasLost: boolean): void;\n  setFaceCallback(face: Face): void;\n  maxRows: number;\n  maxColumns: number;\n  numbersOfBombs: number;\n}\n\nconst Info: React.FC<InfoProps> = ({\n  face,\n  time,\n  isLive,\n  bombCounter,\n  maxRows,\n  maxColumns,\n  numbersOfBombs,\n  setTimeCallback,\n  setCellsCallback,\n  setIsLiveCallback,\n  setBombCounterCallback,\n  setHasLostCallback,\n  setHasWonCallback,\n  setFaceCallback,\n}) => {\n  useEffect(() => {\n    if (isLive && time < 999) {\n      let timer = setInterval(() => {\n        setTimeCallback(time, 1);\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [isLive, time, setTimeCallback]);\n  return (\n    <section className=\"game-info\">\n      <NumberDisplay value={bombCounter} />\n      <FaceInfo\n        face={face}\n        setTimeCallback={setTimeCallback}\n        setCellsCallback={setCellsCallback}\n        setIsLiveCallback={setIsLiveCallback}\n        setBombCounterCallback={setBombCounterCallback}\n        setHasLostCallback={setHasLostCallback}\n        setHasWonCallback={setHasWonCallback}\n        setFaceCallback={setFaceCallback}\n        maxRows={maxRows}\n        maxColumns={maxColumns}\n        numbersOfBombs={numbersOfBombs}\n      />\n      <NumberDisplay value={time} />\n    </section>\n  );\n};\n\nexport default Info;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport generateCells, { CellType } from \"../utils/cells/generateCells\";\nimport \"./App.scss\";\nimport Field from \"./Field/Field\";\nimport Footer from \"./Footer/Footer\";\nimport { Face } from \"./Info/FaceInfo/FaceInfo\";\nimport Info from \"./Info/Info\";\nimport Settings from \"./Settings/Settings\";\n\nconst App: React.FC = () => {\n  const [maxRows, setMaxRows] = useState<number>(9);\n  const [maxColumns, setMaxColumns] = useState<number>(9);\n  const [numbersOfBombs, setNumbersOfBombs] = useState<number>(10);\n  const [face, setFace] = useState<Face>(Face.smile);\n  const [isLive, setIsLive] = useState<boolean>(false);\n  const [time, setTime] = useState<number>(0);\n  const [cells, setCells] = useState<CellType[][]>(\n    generateCells(maxRows, maxColumns, numbersOfBombs)\n  );\n  const [bombCounter, setBombCounter] = useState<number>(numbersOfBombs);\n  const [hasLost, setHasLost] = useState<boolean>(false);\n  const [hasWon, setHasWon] = useState<boolean>(false);\n  const [hasChangeLevel, setHasChangeLevel] = useState<boolean>(false);\n\n  const setFaceCallback = useCallback(\n    (faceType: Face): void => {\n      setFace(faceType);\n    },\n    [setFace]\n  );\n\n  const setTimeCallback = useCallback(\n    (timeValue: number = time, increaseValue: number = 0): void => {\n      setTime(timeValue + increaseValue);\n    },\n    [time]\n  );\n\n  const setIsLiveCallback = useCallback(\n    (isLiveValue: boolean): void => {\n      setIsLive(isLiveValue);\n    },\n    [setIsLive]\n  );\n\n  const setCellsCallback = useCallback(\n    (newCells: CellType[][]) => {\n      setCells(newCells);\n    },\n    [setCells]\n  );\n\n  const setBombCounterCallback = useCallback(\n    (\n      newBombCounter: number = bombCounter,\n      increaseValue: number = 0,\n      isAddition: boolean = false\n    ): void => {\n      isAddition\n        ? setBombCounter(newBombCounter + increaseValue)\n        : setBombCounter(newBombCounter - increaseValue);\n    },\n    [bombCounter]\n  );\n\n  const setHasLostCallback = useCallback(\n    (hasLost: boolean) => {\n      setHasLost(hasLost);\n    },\n    [setHasLost]\n  );\n\n  const setHasWonCallback = useCallback(\n    (hasWon: boolean) => {\n      setHasWon(hasWon);\n    },\n    [setHasWon]\n  );\n\n  const setMaxRowsCallback = useCallback(\n    (maxRows: number) => {\n      setMaxRows(maxRows);\n    },\n    [setMaxRows]\n  );\n\n  const setMaxColumnsCallback = useCallback(\n    (maxColumns: number) => {\n      setMaxColumns(maxColumns);\n    },\n    [setMaxColumns]\n  );\n\n  const setNumbersOfBombsCallback = useCallback(\n    (numbersOfBombs: number) => {\n      setNumbersOfBombs(numbersOfBombs);\n    },\n    [setNumbersOfBombs]\n  );\n\n  const setHasChangeLevelCallback = useCallback(\n    (hasChangeLevel: boolean) => {\n      setHasChangeLevel(hasChangeLevel);\n    },\n    [setHasChangeLevel]\n  );\n\n  useEffect(() => {\n    if (hasLost) {\n      setIsLive(false);\n      setFace(Face.lost);\n    }\n  }, [hasLost]);\n\n  useEffect(() => {\n    if (hasWon) {\n      setIsLive(false);\n      setFace(Face.won);\n    }\n  }, [hasWon]);\n\n  useEffect(() => {\n    if (hasChangeLevel) {\n      setCells(generateCells(maxRows, maxColumns, numbersOfBombs));\n      setBombCounter(numbersOfBombs);\n      setTime(0);\n      setIsLive(false);\n    }\n  }, [hasChangeLevel, maxRows, maxColumns, numbersOfBombs]);\n  return (\n    <div>\n      <Settings\n        setHasChangeLevelCallback={setHasChangeLevelCallback}\n        setMaxRowsCallback={setMaxRowsCallback}\n        setMaxColumnsCallback={setMaxColumnsCallback}\n        setNumbersOfBombsCallback={setNumbersOfBombsCallback}\n      />\n      <div className=\"game-wrapper\">\n        <main className=\"game\">\n          <Info\n            isLive={isLive}\n            time={time}\n            face={face}\n            bombCounter={bombCounter}\n            setTimeCallback={setTimeCallback}\n            setIsLiveCallback={setIsLiveCallback}\n            setCellsCallback={setCellsCallback}\n            setBombCounterCallback={setBombCounterCallback}\n            setHasLostCallback={setHasLostCallback}\n            setHasWonCallback={setHasWonCallback}\n            setFaceCallback={setFaceCallback}\n            maxRows={maxRows}\n            maxColumns={maxColumns}\n            numbersOfBombs={numbersOfBombs}\n          />\n          <Field\n            cells={cells}\n            isLive={isLive}\n            bombCounter={bombCounter}\n            hasLost={hasLost}\n            setFaceCallback={setFaceCallback}\n            setIsLiveCallback={setIsLiveCallback}\n            setCellsCallback={setCellsCallback}\n            setBombCounterCallback={setBombCounterCallback}\n            setHasLostCallback={setHasLostCallback}\n            setHasWonCallback={setHasWonCallback}\n            maxRows={maxRows}\n            maxColumns={maxColumns}\n          />\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}